name: Build & Deploy

on:
  push:
    branches:
      - main

jobs:
  # Job de Build
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Étape 1 : Installer Go et autres dépendances
      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '1.20'

      - name: Install dependencies
        run: go mod tidy

      # Étape 2 : Compiler le programme Go
      - name: Build Go program
        run: go build -o bin/cowsay .

      # Étape 3 : Construire et pousser l'image Docker
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: battaba/cowsay-go:latest
          labels: ${{ steps.meta.outputs.labels }}

      # Étape 4 : Sauvegarder le binaire en tant qu'artefact
      - name: Save binary as artifact
        uses: actions/upload-artifact@v3
        with:
          name: cowsay-binary
          path: bin/cowsay

  # Job de Déploiement
  deploy:
    runs-on: self-hosted  # Utilisation d'un runner auto-hébergé
    needs: build  # Le déploiement dépend du succès du job build

    steps:
      # Étape 1 : Télécharger l'artefact contenant le binaire
      - name: Download binary artifact
        uses: actions/download-artifact@v3
        with:
          name: cowsay-binary
          path: ./bin

      # Étape 2 : Déployer l'application sur le serveur
      - name: Deploy application on server
        run: |
          # Si nécessaire, arrêter et supprimer les conteneurs Docker existants
          docker stop cowsay || true
          docker rm cowsay || true
          
          # Ajouter les permissions d'exécution au binaire téléchargé
          chmod +x ./bin/cowsay

          # Exécuter le binaire en arrière-plan (comme démon)
          nohup ./bin/cowsay "Hello from GitHub Actions!" &
